import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk
from tkinter import colorchooser
import os
import sys
from datetime import datetime, timedelta

FONT_SIZE_MIN = 1
FONT_SIZE_MAX = 1000
DEFAULT_FONT_SIZE = 10
PERMANENT_PASSWORD = '1234567890123456',

def connect_betf_db():
    conn = sqlite3.connect("database/betf.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS app_access (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            start_date TEXT NOT NULL,
            access_granted INTEGER NOT NULL DEFAULT 0
        )
    """)
    cursor.execute("SELECT COUNT(*) FROM app_access")
    if cursor.fetchone()[0] == 0:
        now = datetime.now().strftime("%Y-%m-%d")
        cursor.execute("INSERT INTO app_access (start_date, access_granted) VALUES (?, ?)", (now, 0))
    conn.commit()
    conn.close()

def check_access():
    data = fetch_sql("database/betf.db", "SELECT start_date, access_granted FROM app_access LIMIT 1")[0]
    start_date = datetime.strptime(data[0], "%Y-%m-%d")
    access_granted = bool(data[1])
    current_date = datetime.now()

    if access_granted:
        return True

    if current_date > start_date + timedelta(days=0):
        return False

    return True

def activate_program():
    password_window = tk.Toplevel(root)
    password_window.title("Enter Activation Code - Ghadaam|team")

    # Prevent interaction with the main window
    password_window.grab_set()

    # در صورت بستن پنجره فعال‌سازی، برنامه کاملاً بسته شود
    password_window.protocol("WM_DELETE_WINDOW", lambda: on_exit())  # به جای sys.exit از on_exit استفاده کردیم

    tk.Label(password_window, text="Enter 16-Digit Activation Code:").grid(row=0, column=0, padx=10, pady=10)
    entry_password = ttk.Entry(password_window, show="", width=30)
    entry_password.grid(row=1, column=0, padx=10, pady=10)

    def validate_password():
        entered_password = entry_password.get()
        if entered_password == PERMANENT_PASSWORD:
            execute_sql("database/betf.db", "UPDATE app_access SET access_granted = 1 WHERE id = 1")
            messagebox.showinfo("Success", "Program activated successfully!")
            password_window.destroy()  # پنجره فعال‌سازی بسته می‌شود.
            app_reload()  # برنامه دوباره بارگذاری می‌شود.
        else:
            messagebox.showerror("Error", "Invalid activation code.")

    ttk.Button(password_window, text="Activate", command=validate_password).grid(row=2, column=0, padx=10, pady=10)

def add_sample_activation_codes():
    conn = sqlite3.connect("database/betf.db")
    cursor = conn.cursor()
    sample_codes = [
'1234567890123456',
'jajlfsdfopsidfso',
'1142024468335243',
'4930641087015710',
'9026197679098942',
'1614252051179242',
'0777083118204985',
'7184758570162880',
'4552107876022088',
'0734901141437426',
'5919130233355048',
'9100154571370796',
'9938503965274574',
'6732978809287654',
'2393726647902156',
'6619169894423097',
'4279771808605340',
'9376424401197150',
'8795121737457200',
'0156640573752600',
'9311363582938708',
'4248482199700255',
'9583057346743942',
'7535200371143999',
'8917265408645710',
'7629923917390543',
'6870490757442288',
'8657230877413597',
'1424805029373933',
'9895709049744486',
'9480305104306471',
'9040207793799311',
'3510303770721979',
'2780481854946029',
'2096610449230207',
'7625665869119592',
'1429388851432909',
'9363666936898806',
'8515811411587965',
'5628504083858240',
'5272807238606818',
'9351370541498846',
'7203459862086439',
'0851163789073478',
'0856558373059958',
'4377454911894936',
'3242356841228460',
'9094469593266351',
'5799301212819214',
'4882880109188177',
'1287048664099533',
'7919462915321337',
'8195929513563955',
'6678982009427508',
'5031722210999828',
'1935762772140020',
'1663128209016095',
'9115665470561289',
'8819628682588635',
'1647284669682218',
'0821932693639012',
'4730410625978660',
'4242112190730336',
'5296268531882375',
'8390730700648474',
'0559807029168607',
'0452217527199226',
'7464075093631908',
'0643868641205831',
'2654281155819277',
'7625496203660873',
'4918331834679558',
'8500797558471151',
'6006839323705924',
'7309980851984319',
'8857981335784108',
'1756177064479196',
'7094014773674072',
'4210314679201856',
'5270503876427651',
'2028321097759763',
'3348054690013227',
'4515264417076390',
'5764168836781946',
'3379278805853934',
'5783227794218781',
'9903897850078750',
'5932744823548150',
'5551929258501778',
'6515732461450356',
'6927307777674719',
'0637591921910808',
'2233169380830531',
'5838672630980859',
'5878381380424374',
'3737663140582582',
'0751069342424847',
'9049711718169295',
'3117810267713327',
'5695074308841027',
'4846869149750195',
'6256382210626351',
'5409383151337498',
'4700638132889466',
'7889903626021248',
'3526670614127219',
'1478427385729208',
'7267090233201915',
'0607107043598425',
'0126509086840836',
'8322459738906811',
'7035929851112379',
'1294982766354945',
'1313921984625780',
'4232512238601903',
'6510505583026400',
'3518472688268472',
'5127700942490699',
'0175677276991649',
'0174834485570796',
'6824231640860440',
'2998000184685477',
'7616154270767083',
'3699651744044419',
'2370707025910663',
'0237163254563785',
'5726596105444033',
'1943202137671961',
'6075674094053965',
'3621214930708510',
'2045478859542144',
'4781255058371580',
'3285519145951255',
'3617462713303387',
'7754061762102354',
'6720848161838327',
'1726307214493164',
'3433403480727789',
'9512436966810966',
'0084287644656363',
'4457011451517577',
'3509968260940243',
'5437795676689371',
'8188222803359189',
'0133249164890887',
'4779192623017795',
'5155883150285257',
'0991171941987055',
'6107691343022045',
'7273471414104617',
'5613468226208267',
'6300168397904355',
'9092393166087911',
'8566585350475752',
'3079816677418832',
'9439055238122755',
'2115842836346316',
'4375886532616042',
'4504434650879957',
'5874825568227076',
'8457995810516658',
'6092817927930897',
'6356151872406052',
'4880469193416647',
'0688811579538623',
'8317450091488401',
'2108031702121656',
'8150575250315941',
'1664519430804717',
'0103155800776649',
'5601961664865921',
'0868913524360437',
'3389484507623933',
'4302262038731849',
'6294703149098861',
'1049263264628619',
'7118033716490305',
'9422924425201008',
'7017904629031962',
'0474356912774715',
'7523638243320318',
'6803451519183990',
'0862125190959941',
'8921554987508510',
'4137303374060546',
'4785485071117674',
'7099898411758569',
'5291115369225811',
'9814652093085426',
'9103046020341352',
'7656741047360014',
'9252492508301891',
'8074161346701096',
'8619041194268752',
'3641898887448683',
'1573729821448631',
'3889248494087045',
'8140446765180679',
'7229355137721194',
'0007220475413702',
'2642295212525451',
'2332458656266285',
'1780886791214659',
'2595042021901172',
'8295933977914358',
'9834150230862440',
'5316065574405688',
'9670109044702956',
'5152816133916379',
'6333036506167392',
'1117404437921085',
'4613904233213556',
'4620113717195453',
'4891304141381461',
'8799140620188096',
'1927125841035422',
'8511145541118646',
'1872348327282732',
'2411998696204688',
'0093086885972872',
'9388165382601259',
'4258191253657413',
'5126517837135309',
'4708448155223652',
'1529501381523426',
'9833359047120602',
'2062042338974723',
'8996539932721183',
'1371786277724013',
'2462327868343640',
'8353859084509900',
'8421499351046257',
'0061818746117664',
'2181365968746130',
'0120768819167246',
'0857089898820618',
'7342060828906008',
'6655033660157182',
'8102336496311993',
'1347309297391268',
'4322784177383976',
'4334061092389730',
'5068944722016146',
'8945163122470060',
'1739658138177624',
'6146753854702648',
'4691056862269356',
'1716814728980732',
'4558778531856905',
'5018551968655478',
'4408687085382515',
'2942131714503451',
'6261936466348873',
'7287266712681834',
'6658626415205703',
'9199844863505698',
'8321598140183843',
'2251397007901994',
'9874076463209616',
'6297227885207256',
'2495555994038092',
'5162848905304671',
'6910584751223719',
'8905356069221873',
'0859490470977939',
'9185886212709864',
'9885323545615376',
'5053088223814126',
'1228192373172465',
'5644018192591033',
'2571327800517066',
'8633187263882837',
'3852999195756364',
'7699986562637871',
'8567277643521742',
'0307371490593618',
'3245931446446495',
'9443170655091847',
'6032194271935026',
'7677860485084304',
'7654100712209931',
'8661491932621565',
'3626785144826496',
'5359979998357929',
'0900081799094643',
'8411270632039432',
'5909387756170223',
'9212497385132812',
'0578989720313086',
'8608888047172092',
'0053035200545915',
'0486286552556971',
'1529765450824057',
'8788658400721816',
'6733920942130778',
'7700418155325612',
'8936443717541784',
'1238555181361158',
'8577212923555755',
'9694721317333878',
'2141161832420026',
'5115267661698334',
'5955778768753107',
'1620266582727453',
'3065370996121162',
'8277806247502264',
'8756269043897564',
'1385653559514114',
'1523882355033934',
'9099382638957764',
'4199133955320422',
'7979875973718799',
'9411851810109931',
'6845471437600668',
'0331727485983163',
'7565464867657791',
'0174830370178263',
'3516362259543417',
'6605675784857745',
'7805375130129739',
'8609249203677300',
'5429395293827297',
'1881244314464077',
'2101890617423660',
'6466498096457541',
'3214610845642934',
'3448090388134201',
'0446541371386144',
'0825789448184747',
'1408990109821454',
'4515002093672844',
'2033121367251489',
'8680531140047810',
'0984102551553436',
'6782312589549444',
'6580669179823106',
'7993394243908600',
'0729692598379710',
'3026283305813117',
'0911285359514962',
'6423799105140281',
'6508074201942033',
'0991950200937120',
'3454207693720623',
'1030387811526036',
'1065850748346620',
'2495287205785766',
'0254029142676087',
'5115238709868004',
'2528755839568763',
'8408241180951309',
'3268247523313255',
'3068763847340317',
'1275546650458693',
'7150427454342278',
'0714188243149922',
'6808904477744107',
'3423475100376817',
'2426925126690849',
'0002553614248421',
'7363711109083244',
'9260989233270267',
'7587174424942756',
'0643339657032877',
'7106237456447034',
'0975727231859091',
'5788089580467748',
'5965557245493516',
'3807098377265146',
'7125715581887079',
'0850595130485337',
'6807251143439642',
'9891207793036732',
'6716007709390246',
'2101867353895708',
'0783545217190237',
'6270735041232884',
'3463737851354956',
'0998131297964487',
'8851084295877268',
'0468234869815568',
'9415766756462436',
'5601968218835502',
'0073012413008185',
'0166561456713360',
'6111891901072133',
'0723290139845375',
'9930098252285935',
'7088777003474796',
'3895871210913572',
'7659666187658637',
'7214830303852137',
'1936102011712458',
'9249938411699382',
'5246655844185976',
'4296420885232817',
'3940655062080987',
'2891853019995621',
'3133820810837269',
'8862100790199716',
'8877244519032556',
'3772723517642296',
'5371134382493351',
'8781735315440087',
'5937409044070271',
'9256364265302087',
'2281429913517071',
'3778757892918257',
'3661537878277957',
'8649850879130657',
'6313588071232890',
'3577282541360763',
'2140597157223038',
'8431317116783929',
'9479358026684079',
'4567454351003222',
'6056078411257440',
'0666653812224431',
'6943629119142680',
'2373286872016142',
'9423295882742202',
'7458367764221500',
'8035534487595045',
'8511007704468526',
'6028923831449421',
'7686931255386261',
'1980500853712892',
'4094396723241485',
'8551667332850582',
'0740983425029338',
'8429161335204074',
'6603892416611636',
'8781486129503443',
'7863897705790801',
'0488158068708170',
'9028838229532626',
'3740887924975251',
'3381019244426343',
'1922776829117454',
'7857497258519723',
'2144935132211757',
'2684381912439542',
'9805334764160398',
'9177447986465164',
'4779697541246624',
'3164390158426947',
'9952786179965928',
'3320699749734895',
'4894684681510516',
'6703292435061864',
'7397967872612876',
'9356614061047515',
'4127850935589448',
'1490055427848890',
'3079910209531958',
'1581080401596162',
'3832478747406813',
'6149066035189480',
'1971487311556798',
'6666574202618869',
'2147766158044524',
'6581481752605795',
'6263412968720673',
'3165550597554297',
'2874802479682201',
'1667288269798953',
'0900549635351421',
'1212179110030390',
'3594159173920194',
'8853215621556508',
'9418373293401443',
'2558505147511241',
'8996895654878163',
'3576406627925687',
'5973333486082909',
'0588626833048628',
'6435759908153004',
'8957074111480546',
'5389526711533530',
'0702685080348193',
'1827936783759390',
'5999728378855584',
'4946892250184735',
'9015747474851577',
'4904971857480494',
'8222395373811281',
'4406962735484741',
'5959843781298460',
'7702123416854003',
'1769980896634629',
'2664227473746472',
'8479047470721287',
'6340179313459865',
'5189377221484237',
'2378672652649488',
'6535538924211470',
'9447660694342555',
'3912886074033649',
'7349039670430455',
'3982333729421251',
'7561004306610465',
'5296751063145533',
'2803214604109798',
'6685131499562208',
'0035410984848057',
'1923272682634956',
'7040265089147670',
'9791210162979578',
'9788279457009623',
'8471100151806867',
'4708106185437314',
'6682599298993508',
'8436777294733009',
'4580237620985272',
'2029564184758598',
'5849679670861217',
'5426482543483002',
'6907729619501137',
'0325217646541146',
'5635498764380204',
'3018041893593155',
'9701836817254896',
'4301328479498421',
'8676643901896671',
'6647102044743473',
'4590261122614310',
'5557970359055112',
'2992997083228503',
'5182710144830531',
'5508703941200033',
'2146058372584647',
'1410977836933984',
'1571573743420672',
'7072800563313903',
'2859317570266628',
'2989186905041637',
'7433573043556182',
'0277744351667300',
'3432972301058980',
'4503981640264923',
'8108852466476888',
'9881964435315845',
'7196431922029283',
'8279609316793402',
'4503669579646232',
'1097004600753835',
'7362611699697509',
'9031049263807139',
'8080969546629991',
'5864150031445409',
'9994864828034864',
'4439482211019831',
'6870467138644617',
'1493870698744538',
'3429217478224476',
'1427177620309880',
'3461496834144013',
'0683134617527790',
'4168092312825439',
'9149713699066340',
'7366788622048195',
'7493419468750862',
'0515890583797802',
'7620825871308777',
'5001998520640451',
'7471920150134764',
'8283336553568091',
'8709319008363286',
'6201904899791415',
'9320706227669557',
'6496733419509155',
'2962406116800666',
'5499476286183873',
'9970344016417407',
'6445645224870824',
'3151666454931618',
'3048992705468864',
'6204390560557380',
'7928000074198727',
'1477125560094579',
'8140546071211824',
'9863864298041850',
'9194817642149740',
'5168408158516648',
'9586601851158952',
'0554642466552818',
'4571987406890841',
'0159674129474907',
'6967101892183182',
'3419614303093454',
'1372824601149805',
'2963222114210035',
'1067735279590007',
'2417499099783926',
'0126961115802827',
'9921283785853259',
'9920606358648194',
'9387754789476784',
'9375827222651905',
'2209460390685361',
'3310348239292112',
'9094735737876353',
'8277159031156633',
'9341634290419311',
'3759535110160644',
'0391895199399492',
'5030269995186091',
'8550419631698098',
'3309927102452977',
'8847639123709929',
'8108200535353144',
'2620578821757651',
'4291818873696251',
'8947119278022334',
'2220464350883621',
'7157133498914042',
'3777929474439909',
'9178837843000070',
'9320145821019573',
'8128257571107746',
'9799753923781085',
'1494087244630501',
'1953682610580894',
'8595578142831718',
'7486408931023282',
'4486834390131009',
'2583520953482689',
'3212609417974772',
'3180235336700764',
'9871998929986198',
'2023822310713994',
'0963226287382462',
'6375809930398166',
'6485746004427896',
'1985134382094093',
'0729829063680809',
'1580759453953050',
'5335679302804816',
'9393919654847661',
'9603051143164167',
'6956558523774639',
'0115672003330344',
'2488871358206162',
'4898573788320804',
'5789636551373215',
'6852986023863669',
'0178394321688239',
'2425785022741631',
'0544227277107674',
'7006582595827032',
'0429875676127342',
'6203050646051054',
'2938582203776154',
'6762167384299924',
'3707331791995145',
'5944589560312948',
'2766222182918435',
'1427396164516655',
'2998376145434633',
'6177163491274356',
'5584174108555614',
'8776667073542704',
'3782375838189914',
'7073654758003783',
'4305259985829512',
'0259951664215008',
'7476153614135344',
'7409687714111277',
'6500467361038207',
'6835558761610087',
'8949183690204133',
'2843387667208487',
'9847633959590727',
'3266459941108368',
'7158475230459341',
'7463341853007396',
'2096422807408807',
'6606678309983448',
'0340834858152851',
'5301433578112633',
'7349460030744195',
'0797773345368397',
'9014018800024033',
'9768826212296765',
'4338767999180945',
'3999621383723332',
'5288611300192053',
'0842767679958758',
'6155090885783550',
'2713308653111591',
'6842426751979979',
'0253661859698172',
'8947281740245873',
'1738383999658516',
'4449218686536123',
'9898915487953012',
'0015793471904863',
'5133791721376471',
'5445841319674469',
'6313808275595210',
'3869412438480471',
'8633454678616745',
'6004036863091288',
'4374610682645895',
'2004114485157564',
'2498177614883854',
'2560354253466909',
'6318853328723991',
'0878506852058810',
'5312971890361035',
'4838870349669310',
'9495065394924618',
'7951056531321406',
'0017514968070078',
'6496767775317259',
'3582987849217409',
'1579952290702057',
'6032184887165443',
'8938701944754495',
'2789617627719321',
'2206574399727976',
'1343570978405198',
'6419096052491126',
'7391302792782490',
'8239818254658127',
'0066954374143512',
'3631396589486411',
'8739024162043742',
'7814253730789463',
'4466867064146366',
'4408033708457131',
'7607739763715304',
'6234042056935276',
'3034041212774127',
'5276870049283749',
'2156722855714220',
'8978330868014060',
'7613812633241253',
'0397122227924959',
'3804421592128457',
'5039343471440526',
'2706471831139775',
'2236820819185177',
'4925623600218378',
'7944789454020427',
'7621543846490742',
'3683267497020457',
'5432695407656916',
'3737654934304995',
'0974067791451652',
'0391215602333615',
'3295972715594576',
'1536587185318222',
'3064069904023072',
'1094454215702901',
'4285748659080229',
'7306742112259645',
'8028147441768065',
'5061321445768999',
'2080192175884588',
'5201785425406277',
'8562531024187796',
'6335628457106270',
'6294444410319632',
'1440475166642054',
'7199435127140879',
'8236686637506605',
'6327040092989392',
'9004895675238137',
'1333174190418950',
'6672706213036759',
'4949816184607445',
'1566857964926997',
'9903729087261583',
'6931831198396901',
'9751901686972625',
'5111998781048432',
'6019379004062136',
'2940797436150989',
'8419458658448252',
'9749912048187816',
'1033235628961465',
'6865963602817593',
'5414132184306365',
'6037608853707691',
'9471033127779181',
'8831170379900459',
'2749718470977938',
'5546980492406795',
'4560717415871805',
'1654180477403001',
'1508192401290426',
'6733759095290925',
'1431002408978721',
'5117105580849563',
'9848531999396146',
'5912770411000110',
'1625285908366580',
'4015421811491310',
'3481268818079252',
'4988281537152179',
'0579481459216105',
'7002578238838116',
'0716255232830418',
'8689514360886904',
'5405324461260425',
'9004623216263666',
'8888189207635648',
'0633443641304052',
'8527710518151012',
'8496616562109447',
'4517577652014205',
'2280322532597967',
'9805148989524285',
'2936544738643570',
'5051201248965587',
'5894835930588785',
'8458826373992025',
'3549133707294716',
'0889313135877831',
'6065306118193312',
'0412801628770565',
'6874896438061592',
'8680340725334850',
'7418909538055438',
'3343124267360477',
'8981242158705854',
'5188959160547868',
'4250712049138506',
'7014849021052011',
'6867269636267406',
'0301328622202422',
'9407662110621791',
'9988647050860555',
'3416649093974509',
'1065787187227540',
'9966133923547278',
'0715366514628740',
'4922601926821100',
'4758522590581600',
'4040312156507680',
'4235653026065142',
'0744842436427538',
'9279867555005415',
'8928930918957114',
'7733078403931578',
'6798720181409734',
'6988811271500064',
'1184358314874696',
'0412812134459348',
'1209664770858583',
'5901432137806687',
'2924428674619626',
'4589284320827305',
'5384277576206670',
'6190833411614738',
'6099263391347715',
'9313780397175102',
'0903842776329786',
'1307627298538039',
'9319287251593724',
'4298885567153682',
'8690492893287296',
'8460463257557876',
'7303608643162426',
'0419249485586993',
'9523445119976416',
'6526405384312888',
'8488831438171590',
'8907380339225487',
'8963614578475585',
'8335882213556535',
'5250501965357978',
'1145691786881699',
'4697706593765314',
'9985362150664338',
'4422504006775732',
'4166965073150628',
'9892782904264904',
'4949960226605265',
'1058335180434903',
'3006925268631042',
'7176142318932020',
'7967085070484147',
'0931199148557961',
'8172096075327765',
'2746265945577646',
'3320737672352746',
'4828014633888225',
'3690050679732519',
'1208007306824180',
'3098297562796956',
'1027791424601547',
'6527622678982592',
'9060798384703459',
'4784093957624584',
'2039639458110560',
'4236233127235569',
'4008279427898208',
'9017386417761511',
'1251626272670341',
'4716079104828882',
'3787796649544023',
'3489254165787766',
'7573615742643852',
'3165726450421682',
'0794429039575808',
'1124953712028542',
'3395106840599171',
'4417336378855524',
'3935829257768552',
'6851447498527462',
'0457650427284901',
'1257133526035473',
'6386156109433482',
'6334957342242156',
'3030306011065806',
'3251198192390599',
'4254272003142276',
'7339804399452414',
'8872386630581703',
'4256426761401578',
'6412532534892129',
'2789949206272639',
'1475579232070953',
'6588196990912995',
'3968100016550182',
'0879713162555779',
'6052086837252950',
'4183229551759216',
'8247375428104023',
'2419940085441398',
'2103646301503766',
'2828430081381933',
'5243828674545331',
'5327309611435717',
'4818107501535369',
'3001636758014193',
'2081670515395615',
'6234963963630889',
'9001132311488744',
'6239040720099388',
'1077406185917741',
'2779433788688098',
'0468220466546912',
'5044749878706451',
'7129572137696338',
'5197655092205918',
'0139126195186552',
'1836274826910056',
'0639944893137635',
'9916174634110364',
'9081629747639839',
'8239937989865605',
'5051608612568709',
'9033869696026760',
'4751380534492234',
'7486008137286550',
'4498454890496566',
'8539439410098475',
'3052773494546823',
'3371403261837124',
'0914843317454594',
'8335739778565112',
'1275804042306085',
'9723152526510637',
'7565985459058764',
'9630193317238701',
'1032590139670590',
'2671497155603536',
'5876960102199026',
'9500515203791604',
'1231997819948304',
'4503277008583848',
'5080911709147956',
'3582445809670944',
'6154095117981789',
'5387287102121742',
'2862326616631983',
'3565947450002360',
'1878494853589294',
'7990282215217200',
'3680081778234805',
'4549546955390503',
'4525248887908264',
'1203220087282184',
'3753825803864222',
'6745963886107135',
'2687007367238094',
'3986658757526266',
'6324940557868866',
'3850018248155884',
'5721438535199625',
'5981812100978662',
'9342743565283593',
'0274064820408578',
'7297753658935259',
'7046662652455023',
'1728951103153781',
'7496512539369149',
'4046659623610984',
'4846918025261472',
'1922481359153946',
'4666663507623782',
'6287780034709926',
'3269217966900622',
'6624180267211357',
'1820118118881078',
'4170098725157812',
'7630565662238929',
'4779034884776725',
'8204996954716714',
'0089035546034578',
'3556800327742102',
'9917904726221834',
'7500188659398688',
'3283087509766215',
'7823848499862402',
'4917177727765108',
'3103458242056608',
'5656087402917204',
'8609968746120258',
'7713683959623499',
'0701561956212649',
'8917167329757089',
'6857538735355119',
'7368098086251976',
'4729289494964136',
'9708501294968258',
'9340523440473722',
'8528426512722419',
'3733613856149993',
'5862605412476138',
'8215997771910037',
'0194328549437001',
'2016282202921619',
'3460068227123182',
'3779649200988375',
'2398787738030320',
'8203790056055270',
'0058750896360984',
'1889425650261098',
'1963296777150344',
'8918377846135473',
'1973275212583011',
'1157511135807248',
'8208087463112472',
'8916712750873247',
'7798489093267499',
'0343420278433955',
'8289988361396264',
'2623792920427523',
'4108384911345676',
'6865270556042338',
'4756309153705994',
'3036055400856322',
'6807414391523162',
'8487189280445768',
'7234819747848890',
'8673539512272231',
'9079691821571390',
'1879191216711544',
'8993225310081185',
'0970600810043412',
'7743480593957769',
'0223653282163418',
'3586943572032694',
'0322650432370918',
'3943589232489670',
'2655902400085776',
'2871616926445643',
'2058619133148824',
'5716257906541916',
'0921574353112576',
'6377354268340387',
'6256815296739765',
'5159609809429014',
'6701567906439442',
'2518500749161449',
'2823038618339225',
'9377497923060793',
'7219050375784221',
'2574097309669313',
'4086334103728855',
'7286834862381723',
'0613309928555943',
'7814755797605628',
'3320091815863637',
'7165762035602854',
'7100990924055785',
'5570228911605930',
'0984347222795369',
'2072491870180893',
'4363623541223306',
'5720870939117755',
'3712400373982349',
'6859779372767608',
'7712972052879115',
'0846815962392449',
'8066115050237018',
'1370079781736725',
'9231069957200180',
'0032767102437862',
'6499416192532061',
'2236261140090198',
'3835607670849515',
'9384114745321012',
'7283264523628146',
'5233104393801894',
'7182219036996601',
'4396790425197959',
'8970096417260285',
'6666575089497930',
'3295596812896324',
'4165254679307853',
'6924658042266066',
'0288390901096944',
'7910714736625350',
'2482095077597333',
'6617823809822116',
'5874267878663164',
'7347333678211829',
'8876296187643420',
'3855759364457117',
'4559788670185313',
'1297149421520351',
'1490082182004100',
'2425016599278776',
'5699386757112836',
'6707454462413210',
'5017050535639525',
'5617557877570004',
'7523951505406602',
'8021120226533164',
'0971799010423048',
'5114446926698282',
'6955801066340095',
'4744627612569875',
'5736347555237457',
'9297264089697557',
'8097361701381075',
'9178373468117087',
'2018857419537564',
'7743358724105760',
'1205051614384729',
'8689908405584847',
'7365617250646829',
'1865464439759480',
'3562443568605093',
'7278913431685400',
'9710201393414850',
'5653172984582954',
'3930465445984697',
'7103626922158576',
'9855437017357411',
'2829443593646674',
'5362911833400380',
'4563113330786005',
'4633267257709871',
'6541483269167541',
'4743726326237642',
'2445007755397710',
'3433160965349563',
'4593192865902479',
'8283061594497982',
'6630132548184747',
'8767984164877860',
'7262958748186285',
'5515985827823897',
'9100282271357977',
'4985913412199690',
'8278091895324730',
'1085480723840406',
'0439873306215059',
'0261980079933913',
'0215339896682085',
'8253974875527329',
'2223842565674262',
'6296281814769276',
'9033594838878137',
'8618247946902212',
'0192842804619772',
'9675994699493419',
'7006670642942955',
'0430429744705534',
'9840403680389654',
'8038851796144690',
'1745524789842485',
'8924307095937383',
'5948869611260080',
'6665389849731091',
'4559448334456261',
'6902607049807209',
'2384439947059347',
'7880185773959613',
'6691238828861841',
'4060498836699763',
'3845784965261494',
'7704251988508099',
'9841837329717000',
'4552328456366431',
'4004700471019582',
'1855781012751408',
'0749717542385678',
'9691336962153946',
'9664541843141254',
'5910416746004361',
'6805395316000850',
'4649020370254007',
'6608413321862834',
'0155561186549772',
'2808283136464380',
'6832469318530922',
'6820927794296924',
'8691259926003484',
'1055394630947463',
'1093508163922274',
'5393287198790690',
'4412193551407921',
'1371769005222537',
'1180746826711816',
'0801213356535861',
'5719959064170202',
'6180242664183796',
'5305383377929026',
'4574031484597008',
'8858845874240202',
'6147865254037753',
'5245906043412137',
'1668570442164768',
'0033725094194336',
'6283655972939629',
'9059844472432265',
'9587328897046941',
'1908680398173640',
'5918029340279761',
'1712946037481235',
'1463504030704082',
'6927888647008951',
'6073726227796854',
'9659204251569186',
'7135811908214269',
'0402795598522302',
'8898054304756030',
'7347100315795176',
'8031811403312470',
'1549832765571971',
'1717817755663890',
'4114676065089732',
'1041693209789740',
'2975776052591477',
'9866511359225131',
'2112509166757202',
'0535196250530404',
'5827816749018857',
'4916050069386039',
'0822345988008059',
'4957722197003828',
'7425678149176070',
'5669092796474918',
'6971012994679904',
'6984864490347949',
'6728594339410312',
'0559584642133952',
'8260864659684354',
'4028337403558394',
'5907327584489062',
'1060869025622470',
'5320663487205710',
'3193357415475712',
'7177247803454330',
'7968616723484535',
'0611696930437104',
'5668997444016267',
'2548146228980042',
'5343112704944978',
'1252655208989972',
'1508718392345725',
'5318524723446789',
'3285774814333036',
'6789037203635348',
'7963146669721316',
'1864586985996778',
'4754979709272780',
'4200707246114269',
'5035950607627957',
'1460445016888708',
'7512300722364460',
'8554797845852167',
'8554221885592801',
'7726136041997925',
'9036880529064090',
'5713605042438197',
'3613737811651553',
'6669482834316759',
'1350880500948840',
'2819807243435250',
'6638267198913105',
'1838737407654529',
'1165092695859178',
'2963916960519488',
'6638702041022160',
'1396820781917808',
'4978491882623820',
'8174214598810522',
'5523978037481886',
'0817874205953366',
'0207841230733425',
'4634919639334639',
'2915077891273844',
'0803725985412593',
'5959230898082828',
'6972618010115834',
'6938237520477967',
'0899934654440556',
'6096902323562527',
'6037219802926826',
'3556469916363113',
'6645752328273001',
'4178104228315270',
'1108697687379970',
'4536574922851732',
'1908837230959819',
'6271950315831958',
'2327875565809688',
'1642299241658876',
'0802016898876102',
'5181413167468678',
'3890921110848616',
'6543695280537196',
'3197609841061679',
'7472174566435321',
'1367506269102922',
'8382256781498427',
'4825014919743776',
'6724115825983493',
'5107078463262308',
'7552411876308714',
'9378051397727974',
'1696101203848924',
'0227122838761823',
'1859695039385508',
'6288381452922324',
'7130610692355630',
'3219727384145261',
'3677320759305140',
'3204524821890698',
'1933730392731753',
'4198522065708994',
'2260577543584809',
'3784244313793485',
'3908400023948721',
'7436548140357286',
'6489707562784997',
'5271801300390067',
'6967850899173320',
'5944637408064858',
'3492170077893368',
'1017555536421468',
'6121830268551952',
'8359606750669320',
'3686000422123544',
'3856139526281619',
'3031136379212879',
'9041474921495152',
'6922242951369160',
'9803060122164017',
'6755676833323334',
'2103449228583560',
'0028678557995409',
'6736232190549763',
'8658045837143196',
'2337812170792488',
'7285065086107771',
'5845367623566729',
'6655934952462427',
'9210428124037158',
'5340791548398363',
'5991714004805405',
'4339674046301750',
'5335107270985053',
'6044278830830428',
'8724065352696555',
'2972234667026226',
'2376567649877362',
'5301748989369607',
'7130809778960923',
'7873077726196122',
'3445848924862517',
'9281909259319363',
'3126705924711913',
'1325656368557799',
'6880811976300041',
'1655401666693865',
'4420363371648427',
'4076153119550747',
'9418354251328093',
'9274237800807181',
'6104868827464443',
'7797703326197805',
'3780490549518107',
'9325548822272122',
'6283447638061402',
'5749445462368696',
'4134924070300649',
'7139287331623900',
'5640901111006845',
'8243712988489201',
'7683406131120536',
'9896668891700940',
'5746782169565037',
'0880122739451772',
'5247920856073823',
'7299714583597283',
'6708033276409369',
'2094251565892377',
'4982801441947413',
'0574129747387048',
'1910827720778003',
'9095670342196971',
'2169531912708201',
'7647773673661574',
'3480461408941291',
'5635749341691579',
'1762485269457027',
'6948276262941537',
'3511017361252618',
'3093340688933111',
'4787285004974607',
'6411817259654504',
'3329758518393907',
'3355240893164172',
'7195938980842164',
'6469517569469383',
'8739162766041359',
'8229219228771584',
'7349196464521439',
'6012777627576793',
'4541843274422843',
'5873063931754374',
'6690826573183309',
'2234540767722478',
'9727805418575936',
'3504667265708139',
'2424601190975175',
'8233113987112214',
'8064463471592683',
'9124913989756123',
'6375461661686403',
'2283029794091416',
'0347757069241649',
'3400872727894735',
'4725659226138743',
'9033012791413346',
'9967765880813238',
'3707671338248547',
'7630360560645464',
'5185345537864017',
'2736257288910640',
'7705224439650244',
'0221683278458603',
'7184455250050020',
'2945589055181330',
'3410128938183886',
'2945679675585488',
'3117309248043777',
'9257189500840106',
'3166089246180637',
'9778753847469889',
'9805105492881227',
'9973016749706446',
'6716935957938730',
'5239590086038862',
'4186981969270264',
'4995474426294073',
'4955341548629533',
'4099821211594720',
'2716090019865495',
'1849185875157469',
'2603346980859409',
'4636757502131780',
'9392348880601106',
'0609504608679319',
'1718840086730772',
'4441771795012345',
'2119143132636081',
'5661843689144182',
'8983446105565737',
'1734627272279911',
'5548032252635352',
'0922297865402686',
'2521092773929564',
'1488150673208518',
'6276116011904747',
'9155056632022626',
'8258056801500162',
'0101501988285184',
'4551902505450684',
'5804342679247433',
'3480881919304135',
'4305900590056713',
'3910445538211288',
'0870030473200479',
'6653979520497184',
'6343689248992971',
'6609867333203381',
'5881659983733844',
'2413578094824451',
'9586485820727335',
'9757262731724106',
'9176292240491785',
'5604864209659816',
'1572922546477079',
'6853401732221525',
'6429548348875609',
'7173734853516042',
'5633124600288557',
'2672459399611463',
'1613830849552078',
'8654524314352670',
'5872412392660234',
'9897571352374581',
'0623134127135202',
'6908753886618482',
'9397970006000830',
'1758895473934174',
'9366161223635662',
'7470797723195890',
'4166788702620077',
'6484039635971805',
'0789683201870387',
'6006564279541421',
'3445182962762657',
'6777342749342797',
'5264642044751492',
'1232888278765447',
'6851087016144279',
'0897421740824983',
'3316774955637040',
'9893702918072959',
'1013770944306307',
'1794502589055389',
'6628933576021921',
'3004038869294529',
'8182154326389086',
'6978672578760625',
'4477439072002249',
'8318525415306400',
'0667290049560877',
'6542314745018628',
'2130714769230775',
'6951328892654006',
'2993986330650084',
'8418432387349695',
'8537132106036620',
'8292813780508505',
'7395478800858254',
'0106207002042785',
'8482340838363113',
'0234005628104065',
'3367597407023855',
'0665380562637810',
'3125069178142464',
'0614476472635601',
'4114088692155494',
'0106501496273167',
'3745852074890368',
'7372638044930529',
'8583531484155575',
'3402950859447412',
'3863325357778607',
'8169365010754349',
'8735978776076245',
'5289448755436816',
'4042486953882605',
'4899214313914341',
'2321092687470098',
'1526275706068818',
'4177048718542055',
'0037540120623779',
'7047219980621289',
'8387944868629123',
'8152438423771854',
'0984226428050837',
'4931125336401865',
'6656994209917725',
'6987332422624310',
'4585626568348328',
'6644582997254755',
'9407137025751781',
'9072961053898922',
'8029476012712508',
'5253913021342666',
'2837894189404857',
'3099832290004098',
'0124313126561592',
'2778260269352866',
'4226864278946459',
'4300481925136838',
'4895070885705848',
'9997786804376109',
'6136375864648878',
'9738640592339120',
'2996913475505939',
'4972478179032835',
'0419075066178780',
'4504469901526387',
'4759180127090198',
'2767325998029541',
'0639573862006510',
'8370518020299222',
'4728005612721109',
'6830950081851622',
'4076934453700714',
'0401588945555885',
'9456881034278818',
'3402894984364876',
'4035901094137610',
'4671454699277819',
'0534285560769681',
'1084958141742892',
'4713830851871974',
'9694093214550712',
'3077749395929552',
'6727450419587345',
'0380727216155355',
'1575801163578826',
'1493130829108240',
'9380491070378579',
'9352540720933128',
'1184449753227341',
'7954046867686696',
'8444240307861145',
'5934043544708825',
'9004672577316902',
'6207273826261780',
'2134647682352787',
'3115678666251438',
'4319302738008929',
'7923436963410896',
'5061149257586935',
'0197349846125507',
'4457076040422043',
'6736334402302225',
'8853109773472813',
'5836398157083750',
'5302194916956190',
'2807688963262910',
'3032612433940481',
'2198636093916896',
'5005492193636310',
'2569662068613344',
'9628650215458995',
'6823732497599112',
'8061293884389190',
'1945823288750836',
'4897040503149374',
'7682265216948112',
'3339382550331937',
'1486796345186344',
'2120174146355920',
'8790547010154189',
'0999339704741514',
'9674851391885130',
'5118483595084768',
'6269414861285161',
'4070905762674947',
'6821469538392647',
'2804690431251904',
'2477610945544214',
'6058003099723267',
'0158027168951892',
'9497967975103371',
'9943807336258763',
'6183077208455780',
'0879230464353123',
'9827644004322065',
'6300298499651626',
'0934285766322263',
'3760561510101864',
'4559713341125763',
'7453893185290127',
'2946106705915076',
'1279430537304224',
'5663529696969595',
'1815385448352764',
'4677041377911727',
'2060347107821309',
'1181445784437202',
'2843965096849300',
'5987693704889031',
'7284859156784991',
'4871192769735971',
'6640197239156003',
'5729113687491684',
'8444386627889625',
'8171694393499780',
'0309721747654053',
'6034709310124802',
'4850413416309532',
'1010914120609210',
'8343691957302664',
'9424338397307313',
'3800490990930988',
'0106857213524214',
'8009034162050153',
'5361677779471169',
'8520069052889162',
'7354597103635959',
'5491684878080697',
'7166226368086945',
'1972400940762567',
'2053710139825724',
'7651711387149086',
'1453265168623861',
'4640032086309679',
'8378388856737493',
'1537003792816406',
'5535501201726889',
'9036011826920104',
'7351191118511565',
'9997711448356107',
'9821993579338326',
'2855333737218486',
'8131493923135764',
'7317329628580035',
'5999572084922034',
'8443493827877458',
'7295900400556751',
'8026423283103642',
'6289376185890840',
'2866735663270097',
'7200902592435251',
'4277843071712183',
'1492905922840389',
'7511654487150179',
'4384139150297276',
'3899667827510888',
'4199651154867689',
'9121363257090202',
'7020261385263437',
'5779299896956224',
'6295647757001492',
'0844057962911060',
'6635899081636453',
'7963829033919628',
'4816901736797283',
'2877485251789676',
'3688453575183209',
'7796343651893225',
'9985761989177750',
'6974865968361108',
'6314238780665882',
'2208269206750265',
'3557134639542523',
'5937387443475422',
'7174703647951178',
'3519123634921085',
'5266545804837221',
'9792417533677296',
'0409649978365108',
'9496841782984369',
'4999131314800058',
'7700038667525584',
'5498701323736721',
'5226391979522120',
'3873468975319525',
'3219506691874802',
'3320846664951920',
'9437005070454587',
'4191021467035939',
'2897703850167181',
'3808141274574778',
'8221993132114030',
'7537677589317444',
'5577891817358449',
'5605064644957626',
'3939953970951559',
'2521866870384323',
'8500873477710328',
'3094871644950023',
'7095611857256164',
'3607061827182331',
'9696742754807107',
'8658345790541432',
'0987060384189227',
'3571555044024778',
'9350830308966815',
'8695810879850439',
'4276870006777240',
'6751762914050493',
'0524410001690093',
'4548006227243250',
'3383408321568904',
'0439334139956763',
'4830566441616026',
'4973620810535733',
'7944469743023204',
'4618412972916820',
'3543437816626773',
'0440781781435606',
'4474735035136534',
'5077948132574481',
'5530387669419356',
'8175478534927480',
'1331507357777229',
'3523704160248638',
'0839468680954427',
'4621243170018387',
'1226857318341071',
'7976519823239568',
'9827207292010195',
'0744128286699496',
'3285503876473606',
'9495259762623702',
'5172662294882562',
'0260655370051830',
'7595372923202436',
'1513974755485279',
'4941180740721502',
'4884211748083094',
'1634617043659319',
'0117099095385867',
'1623018503888581',
'5036569210655605',
'7667770999835365',
'5149732823436415',
'0505883122822573',
'6650264008056067',
'8678886818183055',
'4114858282937684',
'3012363723525437',
'7714738705566918',
'0787391405139521',
'0341278545893557',
'6576903400064958',
'9264059743132651',
'8880745156744505',
'6649430723242879',
'6746263206992410',
'4971653394813683',
'8915882424319934',
'7680589823801639',
'7467815687220651',
'8878172946761554',
'3529871937194123',
'3094973956871869',
'2873352372137377',
'8203651527099457',
'8641714166255439',
'2143112594407616',
'6182108137828982',
'7343079662381833',
'5380818595266450',
'8124000079667758',
'7796806627834305',
'7621316925752676',
'3515286125182537',
'8490134117264100',
'9186768445059907',
'6970144295838818',
'9282583819517526',
'2140640194850201',
'2297818103237046',
'2220950617895945',
'2565112643452576',
'9936078935529069',
'4920132866707006',
'9770732812211335',
'2345288902226135',
'0609111946847758',
'0001565559235198',
'1965942510760579',
'7513474950229210',
'5684869733383282',
'4109051152595254',
'4300543869348682',
'3163047135130386',
'0440302302635478',
'7044706472936060',
'2391641059199860',
'4371539884205857',
'0851871388230748',
'3848859168574135',
'0539077792623090',
'0810637383531123',
'9018173938548829',
'3738268977194341',
'7176674089990332',
'7401216537947056',
'5593464726920473',
'3199119512026834',
'7523635269453419',
'8911168563825813',
'5411701520487493',
'2281351016854383',
'2685710386145033',
'3517162214669223',
'8859584352544895',
'4112977608869431',
'0028289519110003',
'7604007791028656',
'9501637145119697',
'0603414776153246',
'7279258693335990',
'4766840027010799',
'1078760556641428',
'0822130768265477',
'3018259314465470',
'0126500382742848',
'0332784830771694',
'1117203380752720',
'4694744808753349',
'1253168470529621',
'0462537314109796',
'9855224050276271',
'5054702407715785',
'3912193164213820',
'7721318115011929',
'6356053936744294',
'5792369634321920',
'6086972089616630',
'3247603654369685',
'0880902720644064',
'1330333535243007',
'2960062224319977',
'3867847859044715',
'4328900819400694',
'0356342972232107',
'2128693765407439',
'2067154060678488',
'2061177213610246',
'6678793437505628',
'9365463266259536',
'8770008813870945',
'6903946334850104',
'2473383948076723',
'5881627728416322',
'6894016625064800',
'1376566292068278',
'6510461353107097',
'0506398514333439',
'1471656123328607',
'0407727959033878',
'0348268951582493',
'1722450502962192',
'0657985820771125',
'8001691642113423',
'7649622961110603',
'9377762038392651',
'8800639676506019',
'8093747261919569',
'5668067307992506',
'5264412727938300',
'1332824309069707',
'0941266365809126',
'3466500044331681',
'3551488974625280',
'0035391011380218',
'8352915737635741',
'9172486750812900',
'1996670642346829',
'9114086536227209',
'9022765958553135',
'5975329624628008',
'0591212042124306',
'8192154572918191',
'4992332851437548',
'9723127177149941',
'7299911905106854',
'1593586603621876',
'5533180337200652',
'0455442159102768',
'6311428621158613',
'3875398819923664',
'5199594652287857',
'5420713052847886',
'6997963771300451',
'0276353610359396',
'4795532012093299',
'6654594925869450',
'6616506804019808',
'6390444012403372',
'3841998867672565',
'4558670475558769',
'0073675232596603',
'2417971292293873',
'4926944964184267',
'8389112987981714',
'0324380866925144',
'1017642121148924',
'8383982397840405',
'2325770799513952',
'9485416677095806',
'0923448869214356',
'1285209480045553',
'2056177774518186',
'8317382959154444',
'5511009303752966',
'3276334486787204',
'8137402843929967'
]
    for code in sample_codes:
        try:
            cursor.execute("INSERT INTO activatecode (code) VALUES (?)", (code,))
        except sqlite3.IntegrityError:
            pass  # در صورت وجود کد تکراری، از آن صرف نظر کنید
    conn.commit()
    conn.close()

def app_reload():
    python = sys.executable
    os.execl(python, python, *sys.argv)

# --- اگر دسترسی محدود باشد، پنجره فعال‌سازی نمایش داده می‌شود ---
def enforce_access():
    if not check_access():
        msg = """
        Your 30-day trial period has ended.
        Please enter a 16-digit activation code to unlock the 
        program.
        """
        messagebox.showerror("Activation Required", msg)
        activate_program()
        root.wait_window()

    
# Create or connect to SQLite database for themes
def connect_theme_db():
    conn = sqlite3.connect("database/salar.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            theme_id INTEGER NOT NULL
        )
    """)
    cursor.execute("PRAGMA table_info(user_settings)")
    columns = [column[1] for column in cursor.fetchall()]
    if "font_size" not in columns:
        cursor.execute("ALTER TABLE user_settings ADD COLUMN font_size INTEGER NOT NULL DEFAULT 12")
    cursor.execute("SELECT COUNT(*) FROM user_settings")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO user_settings (theme_id, font_size) VALUES (?, ?)", (1, 12))
    
    conn.commit()
    conn.close()

# Create or connect to SQLite database for questions
def connect_db():
    conn = sqlite3.connect("database/xert.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS themes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            background_color TEXT NOT NULL,
            foreground_color TEXT NOT NULL,
            entry_background TEXT NOT NULL,
            entry_foreground TEXT NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS search_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            query TEXT NOT NULL
        )
    """)
    
    conn.commit()
    conn.close()

def execute_sql(db_name, query, params=()):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute(query, params)
    conn.commit()
    conn.close()

def fetch_sql(db_name, query, params=()):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute(query, params)
    result = cursor.fetchall()
    conn.close()
    return result

def load_questions():
    for row in tree.get_children():
        tree.delete(row)
    questions = fetch_sql("database/xert.db", "SELECT * FROM questions")
    for row in questions:
        tree.insert("", tk.END, values=row)

def load_themes():
    return fetch_sql("database/xert.db", "SELECT * FROM themes")

def add_question():
    question = entry_question.get()
    answer = entry_answer.get()
    if question and answer:
        exists = fetch_sql("database/xert.db", "SELECT COUNT(*) FROM questions WHERE question = ?", (question,))[0][0]
        if exists > 0:
            messagebox.showwarning("Warning", "This question already exists.")
        else:
            execute_sql("database/xert.db", "INSERT INTO questions (question, answer) VALUES (?, ?)", (question, answer))
            load_questions()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Please enter both question and answer.")

def edit_question():
    if not tree.selection():
        messagebox.showwarning("Warning", "Please select a question to edit.")
        return

    selected_item = tree.selection()[0]
    question_id = tree.item(selected_item)['values'][0]
    question = entry_question.get()
    answer = entry_answer.get()
    
    if question and answer:
        execute_sql("database/xert.db", "UPDATE questions SET question = ?, answer = ? WHERE id = ?", (question, answer, question_id))
        load_questions()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Please enter both question and answer.")

def delete_question():
    if not tree.selection():
        messagebox.showwarning("Warning", "Please select a question to delete.")
        return

    selected_item = tree.selection()[0]
    question_id = tree.item(selected_item)['values'][0]
    execute_sql("database/xert.db", "DELETE FROM questions WHERE id = ?", (question_id,))
    load_questions()

def select_item(event):
    if tree.selection():
        selected_item = tree.selection()[0]
        question = tree.item(selected_item)['values'][1]
        answer = tree.item(selected_item)['values'][2]

        entry_question.delete(0, tk.END)
        entry_answer.delete(0, tk.END)

        entry_question.insert(0, question)
        entry_answer.insert(0, answer)

def clear_entries():
    entry_question.delete(0, tk.END)
    entry_answer.delete(0, tk.END)

def change_theme(selected_theme_index):
    themes = load_themes()
    if selected_theme_index < len(themes):
        selected_theme = themes[selected_theme_index]
        root.configure(bg=selected_theme[2])
        style.configure("TFrame", background=selected_theme[2])
        style.configure("TLabel", background=selected_theme[2], foreground=selected_theme[3])
        style.configure("TEntry", fieldbackground=selected_theme[4], foreground=selected_theme[5])
        style.configure("TButton", background=selected_theme[4], foreground=selected_theme[3])
        tree.configure(style='theme.Treeview')
        execute_sql("database/salar.db", "UPDATE user_settings SET theme_id = ?", (selected_theme[0],))

def apply_last_selected_theme():
    current_theme_id, font_size = fetch_sql("database/salar.db", "SELECT theme_id, font_size FROM user_settings")[0]
    change_theme(current_theme_id - 1)  
    change_font_size(font_size)

def open_color_picker(entry):
    color = colorchooser.askcolor(parent=root)[1]
    if color:
        entry.delete(0, tk.END)
        entry.insert(0, color)

def open_new_theme_window():
    new_theme_window = tk.Toplevel(root)
    new_theme_window.title("Create New Theme - Ghadaam|team")

    tk.Label(new_theme_window, text="Theme Name:").grid(row=0, column=0)
    entry_theme_name = tk.Entry(new_theme_window)
    entry_theme_name.grid(row=0, column=1)

    tk.Label(new_theme_window, text="Background Color:").grid(row=1, column=0)
    entry_bg_color = tk.Entry(new_theme_window)
    entry_bg_color.grid(row=1, column=1)
    tk.Button(new_theme_window, text="Select Color", command=lambda: open_color_picker(entry_bg_color)).grid(row=1, column=2)

    tk.Label(new_theme_window, text="Foreground Color:").grid(row=2, column=0)
    entry_fg_color = tk.Entry(new_theme_window)
    entry_fg_color.grid(row=2, column=1)
    tk.Button(new_theme_window, text="Select Color", command=lambda: open_color_picker(entry_fg_color)).grid(row=2, column=2)

    tk.Label(new_theme_window, text="Entry Background:").grid(row=3, column=0)
    entry_entry_bg = tk.Entry(new_theme_window)
    entry_entry_bg.grid(row=3, column=1)
    tk.Button(new_theme_window, text="Select Color", command=lambda: open_color_picker(entry_entry_bg)).grid(row=3, column=2)

    tk.Label(new_theme_window, text="Entry Foreground:").grid(row=4, column=0)
    entry_entry_fg = tk.Entry(new_theme_window)
    entry_entry_fg.grid(row=4, column=1)
    tk.Button(new_theme_window, text="Select Color", command=lambda: open_color_picker(entry_entry_fg)).grid(row=4, column=2)

    def save_theme():
        name = entry_theme_name.get()
        bg_color = entry_bg_color.get()
        fg_color = entry_fg_color.get()
        entry_bg = entry_entry_bg.get()
        entry_fg = entry_entry_fg.get()

        if name and bg_color and fg_color and entry_bg and entry_fg:
            execute_sql("database/xert.db", "INSERT INTO themes (name, background_color, foreground_color, entry_background, entry_foreground) VALUES (?, ?, ?, ?, ?)",
                        (name, bg_color, fg_color, entry_bg, entry_fg))
            messagebox.showinfo("Success", "Theme created successfully!")
            update_theme_menu()
            new_theme_window.destroy()
        else:
            messagebox.showwarning("Warning", "Please enter all fields.")

    tk.Button(new_theme_window, text="Save Theme", command=save_theme).grid(row=5, columnspan=3)

def change_font_size(size):
    if FONT_SIZE_MIN <= size <= FONT_SIZE_MAX:
        style.configure("TLabel", font=("TkDefaultFont", size))
        style.configure("TButton", font=("TkDefaultFont", size))
        style.configure("TEntry", font=("TkDefaultFont", size))
        tree.tag_configure('default', font=("TkDefaultFont", size))
        execute_sql("database/salar.db", "UPDATE user_settings SET font_size = ?", (size,))
    else:
        messagebox.showwarning("Warning", f"Font size must be between {FONT_SIZE_MIN} and {FONT_SIZE_MAX}.")

def reset_font_size():
    change_font_size(DEFAULT_FONT_SIZE)
    execute_sql("database/salar.db", "UPDATE user_settings SET font_size = ?", (DEFAULT_FONT_SIZE,))
    messagebox.showinfo("Info", "Font size has been reset. The application will now restart.")
    python = sys.executable
    os.execl(python, python, *sys.argv)

def open_font_size_window():
    font_size_window = tk.Toplevel(root)
    font_size_window.title("Change Font Size")

    tk.Label(font_size_window, text="Font Size:").grid(row=0, column=0)
    spin_font_size = tk.Spinbox(font_size_window, from_=FONT_SIZE_MIN, to=FONT_SIZE_MAX, width=5)
    spin_font_size.grid(row=0, column=1)

    current_font_size = fetch_sql("database/salar.db", "SELECT font_size FROM user_settings")[0][0]
    spin_font_size.delete(0, tk.END)
    spin_font_size.insert(0, current_font_size)

    def update_font_size():
        try:
            size = int(spin_font_size.get())
            change_font_size(size)
            font_size_window.destroy()
        except ValueError:
            messagebox.showerror("Error", "Invalid font size entered.")

    tk.Button(font_size_window, text="Apply", command=update_font_size).grid(row=0, column=2)
    tk.Button(font_size_window, text="Reset to Default", command=reset_font_size).grid(row=1, column=0, columnspan=3, pady=5)

def on_exit():
    if messagebox.askyesno("Exit", "Are you sure you want to exit?"):
        root.quit()
        root.destroy()

def create_theme_menu(menu):
    themes = load_themes()
    for index, theme in enumerate(themes):
        menu.add_command(label=theme[1], command=lambda idx=index: change_theme(idx))

def update_theme_menu():
    theme_menu.delete(0, tk.END)
    theme_menu.add_command(label="Create New Theme", command=open_new_theme_window)
    theme_menu.add_separator()
    create_theme_menu(theme_menu)

def check_and_display_welcome_message():
    conn = sqlite3.connect("database/num.db")
    cursor = conn.cursor()
    cursor.execute("SELECT first_time FROM user_status WHERE id = 1")
    result = cursor.fetchone()
    if result and result[0] == 1:
        messagebox.showinfo("Welcome", "Welcome to the Questions Database App!")
        cursor.execute("UPDATE user_status SET first_time = 0 WHERE id = 1")
        conn.commit()
    conn.close()

def connect_num_db():
    conn = sqlite3.connect("database/num.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_time INTEGER NOT NULL
        )
    """)
    cursor.execute("SELECT COUNT(*) FROM user_status")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO user_status (first_time) VALUES (?)", (1,))
    conn.commit()
    conn.close()

def reset_databases():
    execute_sql("database/xert.db", "DROP TABLE IF EXISTS themes")
    execute_sql("database/salar.db", "DROP TABLE IF EXISTS user_settings")
    execute_sql("database/num.db", "DROP TABLE IF EXISTS user_status")
    connect_db()           
    connect_theme_db()     
    connect_num_db()       
    messagebox.showinfo("Reset Complete", "All data have been reset. The application will now restart.")
    python = sys.executable
    os.execl(python, python, *sys.argv)

def open_search_window():
    search_window = tk.Toplevel(root)
    search_window.title("Search Questions")

    tk.Label(search_window, text="Search").grid(row=0, column=0)
    entry_search = ttk.Entry(search_window, width=30)
    entry_search.grid(row=0, column=1, padx=5, pady=5)

    results_tree = ttk.Treeview(search_window, columns=("ID", "Question", "Answer"), show='headings')
    results_tree.heading("ID", text="ID")
    results_tree.heading("Question", text="Question")
    results_tree.heading("Answer", text="Answer")
    results_tree.grid(row=1, columnspan=2, pady=10)

    def search_questions():
        query = entry_search.get()
        for row in results_tree.get_children():
            results_tree.delete(row)
        results = fetch_sql("database/xert.db", "SELECT * FROM questions WHERE question LIKE ?", ("%" + query + "%",))
        for row in results:
            results_tree.insert("", tk.END, values=row)
        # Add the search query to history
        if query:
            execute_sql("database/xert.db", "INSERT INTO search_history (query) VALUES (?)", (query,))

    ttk.Button(search_window, text="Search", command=search_questions).grid(row=0, column=2, pady=5)
    
    # Button to view search history
    ttk.Button(search_window, text="View Search History", command=open_search_history_window).grid(row=2, columnspan=3, pady=5)

def open_search_history_window():
    history_window = tk.Toplevel(root)
    history_window.title("Search History")

    history_tree = ttk.Treeview(history_window, columns=("ID", "Query"), show='headings')
    history_tree.heading("ID", text="ID")
    history_tree.heading("Query", text="Search Query")
    history_tree.pack(pady=10)

    history_results = fetch_sql("database/xert.db", "SELECT * FROM search_history")
    for row in history_results:
        history_tree.insert("", tk.END, values=row)

def create_activation_code_table():
    conn = sqlite3.connect("database/betf.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS activatecode (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL
        )
    """)
    conn.commit()
    conn.close()

# Create user interface
root = tk.Tk()
root.title("Questions Database")

# Menu Bar
menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Reset data", command=reset_databases)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=on_exit)
menu_bar.add_cascade(label="File", menu=file_menu)

font_menu = tk.Menu(menu_bar, tearoff=0)
font_menu.add_command(label="Change Font Size", command=open_font_size_window)
font_menu.add_command(label="Reset Font Size", command=reset_font_size)
menu_bar.add_cascade(label="Font", menu=font_menu)

theme_menu = tk.Menu(menu_bar, tearoff=0)
theme_menu.add_command(label="Create New Theme", command=open_new_theme_window)
theme_menu.add_separator()
create_theme_menu(theme_menu)
menu_bar.add_cascade(label="Themes", menu=theme_menu)

# Add search menu
menu_bar.add_command(label="Search Questions", command=open_search_window)

help_menu = tk.Menu(menu_bar, tearoff=0)
help_menu.add_command(label="About", command=lambda: messagebox.showinfo("About", "Questions Database App Version 1.0"))
menu_bar.add_cascade(label="Help", menu=help_menu)

root.config(menu=menu_bar)

style = ttk.Style()
style.configure("Treeview", rowheight=25)
style.configure("TButton", padding=5)
style.configure('theme.Treeview', background='white', foreground='black')

connect_db()
connect_theme_db()

frame = tk.Frame(root)
frame.pack(pady=10)

entry_question = ttk.Entry(frame, width=30)
entry_question.grid(row=2, column=1, padx=5, pady=5)
ttk.Label(frame, text="Question").grid(row=2, column=0)

entry_answer = ttk.Entry(frame, width=30)
entry_answer.grid(row=3, column=1, padx=5, pady=5)
ttk.Label(frame, text="Answer").grid(row=3, column=0)

# Buttons
btn_add = ttk.Button(frame, text="Add Question", command=add_question)
btn_add.grid(row=4, columnspan=2, pady=5)

btn_edit = ttk.Button(frame, text="Edit Question", command=edit_question)
btn_edit.grid(row=5, columnspan=2, pady=5)

btn_delete = ttk.Button(frame, text="Delete Question", command=delete_question)
btn_delete.grid(row=6, columnspan=2, pady=5)

# Questions display table
tree = ttk.Treeview(root, columns=("ID", "Question", "Answer"), show='headings')
tree.heading("ID", text="ID")
tree.heading("Question", text="Question")
tree.heading("Answer", text="Answer")
tree.pack(pady=10)

tree.tag_configure('default', font=("TkDefaultFont", 12))
tree.bind("<<TreeviewSelect>>", select_item)

# Load data
load_questions()

# Apply the last selected theme and font size
apply_last_selected_theme()
connect_db()        
connect_theme_db()      
connect_num_db()      
connect_betf_db()
create_activation_code_table()
add_sample_activation_codes()
enforce_access()
check_and_display_welcome_message()

root.mainloop()
